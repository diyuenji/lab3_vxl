
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c0  080030c0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  080030c0  080030c0  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c0  080030c0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080030c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000c0  08003188  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003188  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095d0  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b33  00000000  00000000  000296b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cf7  00000000  00000000  0002c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baa8  00000000  00000000  0004332f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823c3  00000000  00000000  0004edd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d119a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa0  00000000  00000000  000d11f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000d3c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000d3cb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003088 	.word	0x08003088

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08003088 	.word	0x08003088

0800014c <isButton1Pressed>:
int TimeOutForKeyPress= 200;
int button1_flag=0;
int button2_flag=0;
int button3_flag=0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000dc 	.word	0x200000dc

08000170 <subKeyProcces1>:
void subKeyProcces1(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcces1+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	200000dc 	.word	0x200000dc

08000188 <getKeyInput1>:

void getKeyInput1(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	Key1Reg0=Key1Reg1;
 800018c:	4b1f      	ldr	r3, [pc, #124]	; (800020c <getKeyInput1+0x84>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <getKeyInput1+0x88>)
 8000192:	6013      	str	r3, [r2, #0]
	Key1Reg1=Key1Reg2;
 8000194:	4b1f      	ldr	r3, [pc, #124]	; (8000214 <getKeyInput1+0x8c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1c      	ldr	r2, [pc, #112]	; (800020c <getKeyInput1+0x84>)
 800019a:	6013      	str	r3, [r2, #0]
	Key1Reg2=HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	481d      	ldr	r0, [pc, #116]	; (8000218 <getKeyInput1+0x90>)
 80001a2:	f001 fefd 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <getKeyInput1+0x8c>)
 80001ac:	601a      	str	r2, [r3, #0]
	if((Key1Reg0==Key1Reg1)&&(Key1Reg1==Key1Reg2)){
 80001ae:	4b18      	ldr	r3, [pc, #96]	; (8000210 <getKeyInput1+0x88>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <getKeyInput1+0x84>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d125      	bne.n	8000206 <getKeyInput1+0x7e>
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <getKeyInput1+0x84>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b15      	ldr	r3, [pc, #84]	; (8000214 <getKeyInput1+0x8c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d11f      	bne.n	8000206 <getKeyInput1+0x7e>
		if(Key1Reg2!=Key1Reg3){
 80001c6:	4b13      	ldr	r3, [pc, #76]	; (8000214 <getKeyInput1+0x8c>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <getKeyInput1+0x94>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <getKeyInput1+0x66>
			Key1Reg3=Key1Reg2;
 80001d2:	4b10      	ldr	r3, [pc, #64]	; (8000214 <getKeyInput1+0x8c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a11      	ldr	r2, [pc, #68]	; (800021c <getKeyInput1+0x94>)
 80001d8:	6013      	str	r3, [r2, #0]

			if(Key1Reg2==PRESSED_STATE){
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <getKeyInput1+0x8c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d111      	bne.n	8000206 <getKeyInput1+0x7e>
				TimeOutForKeyPress=200;
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <getKeyInput1+0x98>)
 80001e4:	22c8      	movs	r2, #200	; 0xc8
 80001e6:	601a      	str	r2, [r3, #0]
				subKeyProcces1();
 80001e8:	f7ff ffc2 	bl	8000170 <subKeyProcces1>
				Key1Reg3=NORMAL_STATE;
			}
		}
	}

}
 80001ec:	e00b      	b.n	8000206 <getKeyInput1+0x7e>
			TimeOutForKeyPress--;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <getKeyInput1+0x98>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <getKeyInput1+0x98>)
 80001f6:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress==0){
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <getKeyInput1+0x98>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d102      	bne.n	8000206 <getKeyInput1+0x7e>
				Key1Reg3=NORMAL_STATE;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <getKeyInput1+0x94>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000004 	.word	0x20000004
 8000210:	20000000 	.word	0x20000000
 8000214:	20000008 	.word	0x20000008
 8000218:	40010800 	.word	0x40010800
 800021c:	2000000c 	.word	0x2000000c
 8000220:	20000030 	.word	0x20000030

08000224 <isButton2Pressed>:
int isButton2Pressed(){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	if(button2_flag==1){
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <isButton2Pressed+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d104      	bne.n	800023a <isButton2Pressed+0x16>
		button2_flag=0;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <isButton2Pressed+0x20>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
		return 1;
 8000236:	2301      	movs	r3, #1
 8000238:	e000      	b.n	800023c <isButton2Pressed+0x18>
	}
	return 0;
 800023a:	2300      	movs	r3, #0
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	200000e0 	.word	0x200000e0

08000248 <subKeyProcces2>:
void subKeyProcces2(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	button2_flag=1;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <subKeyProcces2+0x14>)
 800024e:	2201      	movs	r2, #1
 8000250:	601a      	str	r2, [r3, #0]
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	200000e0 	.word	0x200000e0

08000260 <getKeyInput2>:

void getKeyInput2(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	Key2Reg0=Key2Reg1;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <getKeyInput2+0x84>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <getKeyInput2+0x88>)
 800026a:	6013      	str	r3, [r2, #0]
	Key2Reg1=Key2Reg2;
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <getKeyInput2+0x8c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <getKeyInput2+0x84>)
 8000272:	6013      	str	r3, [r2, #0]
	Key2Reg2=HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 8000274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000278:	481d      	ldr	r0, [pc, #116]	; (80002f0 <getKeyInput2+0x90>)
 800027a:	f001 fe91 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <getKeyInput2+0x8c>)
 8000284:	601a      	str	r2, [r3, #0]
	if((Key2Reg0==Key2Reg1)&&(Key2Reg1==Key2Reg2)){
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <getKeyInput2+0x88>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <getKeyInput2+0x84>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d125      	bne.n	80002de <getKeyInput2+0x7e>
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <getKeyInput2+0x84>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <getKeyInput2+0x8c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d11f      	bne.n	80002de <getKeyInput2+0x7e>
		if(Key2Reg2!=Key2Reg3){
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <getKeyInput2+0x8c>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <getKeyInput2+0x94>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d00d      	beq.n	80002c6 <getKeyInput2+0x66>
			Key2Reg3=Key2Reg2;
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <getKeyInput2+0x8c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <getKeyInput2+0x94>)
 80002b0:	6013      	str	r3, [r2, #0]

			if(Key2Reg2==PRESSED_STATE){
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <getKeyInput2+0x8c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d111      	bne.n	80002de <getKeyInput2+0x7e>
				TimeOutForKeyPress=200;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <getKeyInput2+0x98>)
 80002bc:	22c8      	movs	r2, #200	; 0xc8
 80002be:	601a      	str	r2, [r3, #0]
				subKeyProcces2();
 80002c0:	f7ff ffc2 	bl	8000248 <subKeyProcces2>
				Key2Reg3=NORMAL_STATE;
			}
		}
	}

}
 80002c4:	e00b      	b.n	80002de <getKeyInput2+0x7e>
			TimeOutForKeyPress--;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <getKeyInput2+0x98>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <getKeyInput2+0x98>)
 80002ce:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress==0){
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <getKeyInput2+0x98>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d102      	bne.n	80002de <getKeyInput2+0x7e>
				Key2Reg3=NORMAL_STATE;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <getKeyInput2+0x94>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000014 	.word	0x20000014
 80002e8:	20000010 	.word	0x20000010
 80002ec:	20000018 	.word	0x20000018
 80002f0:	40010800 	.word	0x40010800
 80002f4:	2000001c 	.word	0x2000001c
 80002f8:	20000030 	.word	0x20000030

080002fc <isButton3Pressed>:
int isButton3Pressed(){
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	if(button3_flag==1){
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <isButton3Pressed+0x20>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d104      	bne.n	8000312 <isButton3Pressed+0x16>
		button3_flag=0;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <isButton3Pressed+0x20>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
		return 1;
 800030e:	2301      	movs	r3, #1
 8000310:	e000      	b.n	8000314 <isButton3Pressed+0x18>
	}
	return 0;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	200000e4 	.word	0x200000e4

08000320 <subKeyProcces3>:
void subKeyProcces3(){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	button3_flag=1;
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <subKeyProcces3+0x14>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	200000e4 	.word	0x200000e4

08000338 <getKeyInput3>:

void getKeyInput3(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	Key3Reg0=Key3Reg1;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeyInput3+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeyInput3+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	Key3Reg1=Key3Reg2;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput3+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeyInput3+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	Key3Reg2=HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800034c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKeyInput3+0x90>)
 8000352:	f001 fe25 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeyInput3+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
	if((Key3Reg0==Key3Reg1)&&(Key3Reg1==Key3Reg2)){
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeyInput3+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeyInput3+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKeyInput3+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeyInput3+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeyInput3+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKeyInput3+0x7e>
		if(Key3Reg2!=Key3Reg3){
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <getKeyInput3+0x8c>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <getKeyInput3+0x94>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKeyInput3+0x66>
			Key3Reg3=Key3Reg2;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeyInput3+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeyInput3+0x94>)
 8000388:	6013      	str	r3, [r2, #0]

			if(Key3Reg2==PRESSED_STATE){
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput3+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKeyInput3+0x7e>
				TimeOutForKeyPress=200;
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <getKeyInput3+0x98>)
 8000394:	22c8      	movs	r2, #200	; 0xc8
 8000396:	601a      	str	r2, [r3, #0]
				subKeyProcces3();
 8000398:	f7ff ffc2 	bl	8000320 <subKeyProcces3>
				Key3Reg3=NORMAL_STATE;
			}
		}
	}

}
 800039c:	e00b      	b.n	80003b6 <getKeyInput3+0x7e>
			TimeOutForKeyPress--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeyInput3+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeyInput3+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress==0){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeyInput3+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeyInput3+0x7e>
				Key3Reg3=NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeyInput3+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010800 	.word	0x40010800
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000030 	.word	0x20000030

080003d4 <fsm>:
int RED_INC=0;
int YELLOW_INC=0;
int GREEN_INC=0;


void fsm(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch(mode){
 80003d8:	4bb2      	ldr	r3, [pc, #712]	; (80006a4 <fsm+0x2d0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	f200 82d1 	bhi.w	8000984 <fsm+0x5b0>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <fsm+0x14>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	080003f9 	.word	0x080003f9
 80003ec:	08000481 	.word	0x08000481
 80003f0:	08000605 	.word	0x08000605
 80003f4:	080007c5 	.word	0x080007c5
		case 0:
			fsm_automatic_run();
 80003f8:	f000 faf4 	bl	80009e4 <fsm_automatic_run>
			if(isButton1Pressed()){
 80003fc:	f7ff fea6 	bl	800014c <isButton1Pressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	f000 82c0 	beq.w	8000988 <fsm+0x5b4>
					setTimer1(time);
 8000408:	4ba7      	ldr	r3, [pc, #668]	; (80006a8 <fsm+0x2d4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f001 f90f 	bl	8001630 <setTimer1>
					HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	48a4      	ldr	r0, [pc, #656]	; (80006ac <fsm+0x2d8>)
 800041a:	f001 fdd8 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin ,1) ;
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000424:	48a1      	ldr	r0, [pc, #644]	; (80006ac <fsm+0x2d8>)
 8000426:	f001 fdd2 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin ,1) ;
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000430:	489e      	ldr	r0, [pc, #632]	; (80006ac <fsm+0x2d8>)
 8000432:	f001 fdcc 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin ,1) ;
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043c:	489c      	ldr	r0, [pc, #624]	; (80006b0 <fsm+0x2dc>)
 800043e:	f001 fdc6 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin ,1) ;
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000448:	4899      	ldr	r0, [pc, #612]	; (80006b0 <fsm+0x2dc>)
 800044a:	f001 fdc0 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin ,1) ;
 800044e:	2201      	movs	r2, #1
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	4896      	ldr	r0, [pc, #600]	; (80006ac <fsm+0x2d8>)
 8000454:	f001 fdbb 	bl	8001fce <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin ,1) ;
 8000458:	2201      	movs	r2, #1
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	4894      	ldr	r0, [pc, #592]	; (80006b0 <fsm+0x2dc>)
 800045e:	f001 fdb6 	bl	8001fce <HAL_GPIO_WritePin>
					mode++;
 8000462:	4b90      	ldr	r3, [pc, #576]	; (80006a4 <fsm+0x2d0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3301      	adds	r3, #1
 8000468:	4a8e      	ldr	r2, [pc, #568]	; (80006a4 <fsm+0x2d0>)
 800046a:	6013      	str	r3, [r2, #0]
					updateBuffer(mode+1, red_val);
 800046c:	4b8d      	ldr	r3, [pc, #564]	; (80006a4 <fsm+0x2d0>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	4a90      	ldr	r2, [pc, #576]	; (80006b4 <fsm+0x2e0>)
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f000 ff73 	bl	8001364 <updateBuffer>

			}


			break;
 800047e:	e283      	b.n	8000988 <fsm+0x5b4>

		case 1:
			if(isButton2Pressed()){
 8000480:	f7ff fed0 	bl	8000224 <isButton2Pressed>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d00f      	beq.n	80004aa <fsm+0xd6>
				RED_INC++;
 800048a:	4b8b      	ldr	r3, [pc, #556]	; (80006b8 <fsm+0x2e4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	4a89      	ldr	r2, [pc, #548]	; (80006b8 <fsm+0x2e4>)
 8000492:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, red_val+RED_INC);
 8000494:	4b83      	ldr	r3, [pc, #524]	; (80006a4 <fsm+0x2d0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1c58      	adds	r0, r3, #1
 800049a:	4b86      	ldr	r3, [pc, #536]	; (80006b4 <fsm+0x2e0>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	4b86      	ldr	r3, [pc, #536]	; (80006b8 <fsm+0x2e4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4413      	add	r3, r2
 80004a4:	4619      	mov	r1, r3
 80004a6:	f000 ff5d 	bl	8001364 <updateBuffer>
			}
			if(timer1_flag==1){
 80004aa:	4b84      	ldr	r3, [pc, #528]	; (80006bc <fsm+0x2e8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d16f      	bne.n	8000592 <fsm+0x1be>
					  			switch(index_led){
 80004b2:	4b83      	ldr	r3, [pc, #524]	; (80006c0 <fsm+0x2ec>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <fsm+0xec>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d02f      	beq.n	800051e <fsm+0x14a>
					  					display7Seg1(led_buffer[index_led]);
					  					display7Seg2(led_buffer[index_led+2]);
					  					index_led=0;
					  					break;
					  				default:
					  					break; }
 80004be:	e05b      	b.n	8000578 <fsm+0x1a4>
					  					HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,0) ;
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c6:	4879      	ldr	r0, [pc, #484]	; (80006ac <fsm+0x2d8>)
 80004c8:	f001 fd81 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,1) ;
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004d2:	4876      	ldr	r0, [pc, #472]	; (80006ac <fsm+0x2d8>)
 80004d4:	f001 fd7b 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,0) ;
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4874      	ldr	r0, [pc, #464]	; (80006b0 <fsm+0x2dc>)
 80004e0:	f001 fd75 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,1) ;
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ea:	4871      	ldr	r0, [pc, #452]	; (80006b0 <fsm+0x2dc>)
 80004ec:	f001 fd6f 	bl	8001fce <HAL_GPIO_WritePin>
					  					display7Seg1(led_buffer[index_led]);
 80004f0:	4b73      	ldr	r3, [pc, #460]	; (80006c0 <fsm+0x2ec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a73      	ldr	r2, [pc, #460]	; (80006c4 <fsm+0x2f0>)
 80004f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fc12 	bl	8000d24 <display7Seg1>
					  					display7Seg2(led_buffer[index_led+2]);
 8000500:	4b6f      	ldr	r3, [pc, #444]	; (80006c0 <fsm+0x2ec>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3302      	adds	r3, #2
 8000506:	4a6f      	ldr	r2, [pc, #444]	; (80006c4 <fsm+0x2f0>)
 8000508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fd99 	bl	8001044 <display7Seg2>
					  					index_led++;
 8000512:	4b6b      	ldr	r3, [pc, #428]	; (80006c0 <fsm+0x2ec>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	4a69      	ldr	r2, [pc, #420]	; (80006c0 <fsm+0x2ec>)
 800051a:	6013      	str	r3, [r2, #0]
					  					break;
 800051c:	e02c      	b.n	8000578 <fsm+0x1a4>
					  					HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,1) ;
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	4861      	ldr	r0, [pc, #388]	; (80006ac <fsm+0x2d8>)
 8000526:	f001 fd52 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,0) ;
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000530:	485e      	ldr	r0, [pc, #376]	; (80006ac <fsm+0x2d8>)
 8000532:	f001 fd4c 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,1) ;
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	485c      	ldr	r0, [pc, #368]	; (80006b0 <fsm+0x2dc>)
 800053e:	f001 fd46 	bl	8001fce <HAL_GPIO_WritePin>
					  					HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,0) ;
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000548:	4859      	ldr	r0, [pc, #356]	; (80006b0 <fsm+0x2dc>)
 800054a:	f001 fd40 	bl	8001fce <HAL_GPIO_WritePin>
					  					display7Seg1(led_buffer[index_led]);
 800054e:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <fsm+0x2ec>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <fsm+0x2f0>)
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fbe3 	bl	8000d24 <display7Seg1>
					  					display7Seg2(led_buffer[index_led+2]);
 800055e:	4b58      	ldr	r3, [pc, #352]	; (80006c0 <fsm+0x2ec>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3302      	adds	r3, #2
 8000564:	4a57      	ldr	r2, [pc, #348]	; (80006c4 <fsm+0x2f0>)
 8000566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fd6a 	bl	8001044 <display7Seg2>
					  					index_led=0;
 8000570:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <fsm+0x2ec>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
					  					break;
 8000576:	bf00      	nop
					  			//display7Seg1(led_buffer[]);
					  			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	484c      	ldr	r0, [pc, #304]	; (80006ac <fsm+0x2d8>)
 800057c:	f001 fd3f 	bl	8001ffe <HAL_GPIO_TogglePin>
					  			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	484b      	ldr	r0, [pc, #300]	; (80006b0 <fsm+0x2dc>)
 8000584:	f001 fd3b 	bl	8001ffe <HAL_GPIO_TogglePin>
					  			setTimer1(time);
 8000588:	4b47      	ldr	r3, [pc, #284]	; (80006a8 <fsm+0x2d4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f84f 	bl	8001630 <setTimer1>

			}
			if(isButton3Pressed()){
 8000592:	f7ff feb3 	bl	80002fc <isButton3Pressed>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00f      	beq.n	80005bc <fsm+0x1e8>
					red_val+=RED_INC;
 800059c:	4b45      	ldr	r3, [pc, #276]	; (80006b4 <fsm+0x2e0>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <fsm+0x2e4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a43      	ldr	r2, [pc, #268]	; (80006b4 <fsm+0x2e0>)
 80005a8:	6013      	str	r3, [r2, #0]
					updateBuffer(2, red_val);
 80005aa:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <fsm+0x2e0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 fed7 	bl	8001364 <updateBuffer>
					RED_INC=0;
 80005b6:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <fsm+0x2e4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			}


			if(isButton1Pressed()){
 80005bc:	f7ff fdc6 	bl	800014c <isButton1Pressed>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f000 81e2 	beq.w	800098c <fsm+0x5b8>
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port , LED_RED1_Pin ,1) ;
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4837      	ldr	r0, [pc, #220]	; (80006ac <fsm+0x2d8>)
 80005ce:	f001 fcfe 	bl	8001fce <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port , LED_RED2_Pin ,1) ;
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4836      	ldr	r0, [pc, #216]	; (80006b0 <fsm+0x2dc>)
 80005d8:	f001 fcf9 	bl	8001fce <HAL_GPIO_WritePin>
				mode++;
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <fsm+0x2d0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a30      	ldr	r2, [pc, #192]	; (80006a4 <fsm+0x2d0>)
 80005e4:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, yellow_val);
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <fsm+0x2d0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <fsm+0x2f4>)
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 feb6 	bl	8001364 <updateBuffer>
				setTimer1(time);
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <fsm+0x2d4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f817 	bl	8001630 <setTimer1>
			}
			break;
 8000602:	e1c3      	b.n	800098c <fsm+0x5b8>
		case 2:
			if(isButton2Pressed()){
 8000604:	f7ff fe0e 	bl	8000224 <isButton2Pressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00f      	beq.n	800062e <fsm+0x25a>
				YELLOW_INC++;
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <fsm+0x2f8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	4a2d      	ldr	r2, [pc, #180]	; (80006cc <fsm+0x2f8>)
 8000616:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, yellow_val+YELLOW_INC);
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <fsm+0x2d0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1c58      	adds	r0, r3, #1
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <fsm+0x2f4>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <fsm+0x2f8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	4619      	mov	r1, r3
 800062a:	f000 fe9b 	bl	8001364 <updateBuffer>
			}
			if(timer1_flag==1){
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <fsm+0x2e8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	f040 8088 	bne.w	8000748 <fsm+0x374>
				switch(index_led){
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <fsm+0x2ec>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <fsm+0x272>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d045      	beq.n	80006d0 <fsm+0x2fc>
					  	display7Seg1(led_buffer[index_led]);
						display7Seg2(led_buffer[index_led+2]);
					  	index_led=0;
						break;
					default:
					  	break; }
 8000644:	e071      	b.n	800072a <fsm+0x356>
						HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,0) ;
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064c:	4817      	ldr	r0, [pc, #92]	; (80006ac <fsm+0x2d8>)
 800064e:	f001 fcbe 	bl	8001fce <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,1) ;
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000658:	4814      	ldr	r0, [pc, #80]	; (80006ac <fsm+0x2d8>)
 800065a:	f001 fcb8 	bl	8001fce <HAL_GPIO_WritePin>
	 					HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,0) ;
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <fsm+0x2dc>)
 8000666:	f001 fcb2 	bl	8001fce <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,1) ;
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	480f      	ldr	r0, [pc, #60]	; (80006b0 <fsm+0x2dc>)
 8000672:	f001 fcac 	bl	8001fce <HAL_GPIO_WritePin>
						display7Seg1(led_buffer[index_led]);
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <fsm+0x2ec>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <fsm+0x2f0>)
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fb4f 	bl	8000d24 <display7Seg1>
						display7Seg2(led_buffer[index_led+2]);
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <fsm+0x2ec>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3302      	adds	r3, #2
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <fsm+0x2f0>)
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fcd6 	bl	8001044 <display7Seg2>
						index_led++;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <fsm+0x2ec>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <fsm+0x2ec>)
 80006a0:	6013      	str	r3, [r2, #0]
						break;
 80006a2:	e042      	b.n	800072a <fsm+0x356>
 80006a4:	20000100 	.word	0x20000100
 80006a8:	08003021 	.word	0x08003021
 80006ac:	40010800 	.word	0x40010800
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	20000034 	.word	0x20000034
 80006b8:	200000e8 	.word	0x200000e8
 80006bc:	20000110 	.word	0x20000110
 80006c0:	200000f4 	.word	0x200000f4
 80006c4:	20000040 	.word	0x20000040
 80006c8:	20000038 	.word	0x20000038
 80006cc:	200000ec 	.word	0x200000ec
					  	HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,1) ;
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d6:	48b1      	ldr	r0, [pc, #708]	; (800099c <fsm+0x5c8>)
 80006d8:	f001 fc79 	bl	8001fce <HAL_GPIO_WritePin>
					  	HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,0) ;
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e2:	48ae      	ldr	r0, [pc, #696]	; (800099c <fsm+0x5c8>)
 80006e4:	f001 fc73 	bl	8001fce <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,1) ;
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ee:	48ac      	ldr	r0, [pc, #688]	; (80009a0 <fsm+0x5cc>)
 80006f0:	f001 fc6d 	bl	8001fce <HAL_GPIO_WritePin>
	 					HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,0) ;
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fa:	48a9      	ldr	r0, [pc, #676]	; (80009a0 <fsm+0x5cc>)
 80006fc:	f001 fc67 	bl	8001fce <HAL_GPIO_WritePin>
					  	display7Seg1(led_buffer[index_led]);
 8000700:	4ba8      	ldr	r3, [pc, #672]	; (80009a4 <fsm+0x5d0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4aa8      	ldr	r2, [pc, #672]	; (80009a8 <fsm+0x5d4>)
 8000706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fb0a 	bl	8000d24 <display7Seg1>
						display7Seg2(led_buffer[index_led+2]);
 8000710:	4ba4      	ldr	r3, [pc, #656]	; (80009a4 <fsm+0x5d0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3302      	adds	r3, #2
 8000716:	4aa4      	ldr	r2, [pc, #656]	; (80009a8 <fsm+0x5d4>)
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fc91 	bl	8001044 <display7Seg2>
					  	index_led=0;
 8000722:	4ba0      	ldr	r3, [pc, #640]	; (80009a4 <fsm+0x5d0>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
						break;
 8000728:	bf00      	nop
					  			//display7Seg1(led_buffer[]);
					  	HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	489b      	ldr	r0, [pc, #620]	; (800099c <fsm+0x5c8>)
 8000730:	f001 fc65 	bl	8001ffe <HAL_GPIO_TogglePin>
					  	HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	4899      	ldr	r0, [pc, #612]	; (80009a0 <fsm+0x5cc>)
 800073a:	f001 fc60 	bl	8001ffe <HAL_GPIO_TogglePin>
					  	setTimer1(time);
 800073e:	4b9b      	ldr	r3, [pc, #620]	; (80009ac <fsm+0x5d8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f000 ff74 	bl	8001630 <setTimer1>
			}
			if(isButton3Pressed()){
 8000748:	f7ff fdd8 	bl	80002fc <isButton3Pressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d012      	beq.n	8000778 <fsm+0x3a4>
				yellow_val+=YELLOW_INC;
 8000752:	4b97      	ldr	r3, [pc, #604]	; (80009b0 <fsm+0x5dc>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b97      	ldr	r3, [pc, #604]	; (80009b4 <fsm+0x5e0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a94      	ldr	r2, [pc, #592]	; (80009b0 <fsm+0x5dc>)
 800075e:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, yellow_val);
 8000760:	4b95      	ldr	r3, [pc, #596]	; (80009b8 <fsm+0x5e4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a92      	ldr	r2, [pc, #584]	; (80009b0 <fsm+0x5dc>)
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fdf9 	bl	8001364 <updateBuffer>
				YELLOW_INC=0;
 8000772:	4b90      	ldr	r3, [pc, #576]	; (80009b4 <fsm+0x5e0>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed()){
 8000778:	f7ff fce8 	bl	800014c <isButton1Pressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8106 	beq.w	8000990 <fsm+0x5bc>
				HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin ,1) ;
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	4884      	ldr	r0, [pc, #528]	; (800099c <fsm+0x5c8>)
 800078c:	f001 fc1f 	bl	8001fce <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin ,1) ;
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4882      	ldr	r0, [pc, #520]	; (80009a0 <fsm+0x5cc>)
 8000798:	f001 fc19 	bl	8001fce <HAL_GPIO_WritePin>
				mode++;
 800079c:	4b86      	ldr	r3, [pc, #536]	; (80009b8 <fsm+0x5e4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a85      	ldr	r2, [pc, #532]	; (80009b8 <fsm+0x5e4>)
 80007a4:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, green_val);
 80007a6:	4b84      	ldr	r3, [pc, #528]	; (80009b8 <fsm+0x5e4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a83      	ldr	r2, [pc, #524]	; (80009bc <fsm+0x5e8>)
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fdd6 	bl	8001364 <updateBuffer>
				setTimer1(time);
 80007b8:	4b7c      	ldr	r3, [pc, #496]	; (80009ac <fsm+0x5d8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff37 	bl	8001630 <setTimer1>
			}
			break;
 80007c2:	e0e5      	b.n	8000990 <fsm+0x5bc>
		case 3:
			if(isButton2Pressed()){
 80007c4:	f7ff fd2e 	bl	8000224 <isButton2Pressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00f      	beq.n	80007ee <fsm+0x41a>
				GREEN_INC++;
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <fsm+0x5ec>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a7a      	ldr	r2, [pc, #488]	; (80009c0 <fsm+0x5ec>)
 80007d6:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, green_val+GREEN_INC);
 80007d8:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <fsm+0x5e4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1c58      	adds	r0, r3, #1
 80007de:	4b77      	ldr	r3, [pc, #476]	; (80009bc <fsm+0x5e8>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <fsm+0x5ec>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4619      	mov	r1, r3
 80007ea:	f000 fdbb 	bl	8001364 <updateBuffer>
						}
			if(timer1_flag==1){
 80007ee:	4b75      	ldr	r3, [pc, #468]	; (80009c4 <fsm+0x5f0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d171      	bne.n	80008da <fsm+0x506>
				switch(index_led){
 80007f6:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <fsm+0x5d0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <fsm+0x430>
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d02f      	beq.n	8000862 <fsm+0x48e>
						display7Seg1(led_buffer[index_led]);
						display7Seg2(led_buffer[index_led+2]);
						index_led=0;
						break;
					default:
						break; }
 8000802:	e05b      	b.n	80008bc <fsm+0x4e8>
	  					HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,0) ;
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080a:	4864      	ldr	r0, [pc, #400]	; (800099c <fsm+0x5c8>)
 800080c:	f001 fbdf 	bl	8001fce <HAL_GPIO_WritePin>
					  	HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,1) ;
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000816:	4861      	ldr	r0, [pc, #388]	; (800099c <fsm+0x5c8>)
 8000818:	f001 fbd9 	bl	8001fce <HAL_GPIO_WritePin>
					  	HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,0) ;
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	485f      	ldr	r0, [pc, #380]	; (80009a0 <fsm+0x5cc>)
 8000824:	f001 fbd3 	bl	8001fce <HAL_GPIO_WritePin>
					  	HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,1) ;
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	485c      	ldr	r0, [pc, #368]	; (80009a0 <fsm+0x5cc>)
 8000830:	f001 fbcd 	bl	8001fce <HAL_GPIO_WritePin>
					  	display7Seg1(led_buffer[index_led]);
 8000834:	4b5b      	ldr	r3, [pc, #364]	; (80009a4 <fsm+0x5d0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a5b      	ldr	r2, [pc, #364]	; (80009a8 <fsm+0x5d4>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fa70 	bl	8000d24 <display7Seg1>
					  	display7Seg2(led_buffer[index_led+2]);
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <fsm+0x5d0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	4a57      	ldr	r2, [pc, #348]	; (80009a8 <fsm+0x5d4>)
 800084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fbf7 	bl	8001044 <display7Seg2>
					  	index_led++;
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <fsm+0x5d0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a51      	ldr	r2, [pc, #324]	; (80009a4 <fsm+0x5d0>)
 800085e:	6013      	str	r3, [r2, #0]
					  	break;
 8000860:	e02c      	b.n	80008bc <fsm+0x4e8>
	 					HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin ,1) ;
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000868:	484c      	ldr	r0, [pc, #304]	; (800099c <fsm+0x5c8>)
 800086a:	f001 fbb0 	bl	8001fce <HAL_GPIO_WritePin>
					  	HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin ,0) ;
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000874:	4849      	ldr	r0, [pc, #292]	; (800099c <fsm+0x5c8>)
 8000876:	f001 fbaa 	bl	8001fce <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin ,1) ;
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000880:	4847      	ldr	r0, [pc, #284]	; (80009a0 <fsm+0x5cc>)
 8000882:	f001 fba4 	bl	8001fce <HAL_GPIO_WritePin>
				  		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin ,0) ;
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088c:	4844      	ldr	r0, [pc, #272]	; (80009a0 <fsm+0x5cc>)
 800088e:	f001 fb9e 	bl	8001fce <HAL_GPIO_WritePin>
						display7Seg1(led_buffer[index_led]);
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <fsm+0x5d0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a44      	ldr	r2, [pc, #272]	; (80009a8 <fsm+0x5d4>)
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fa41 	bl	8000d24 <display7Seg1>
						display7Seg2(led_buffer[index_led+2]);
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <fsm+0x5d0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	4a3f      	ldr	r2, [pc, #252]	; (80009a8 <fsm+0x5d4>)
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fbc8 	bl	8001044 <display7Seg2>
						index_led=0;
 80008b4:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <fsm+0x5d0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
						break;
 80008ba:	bf00      	nop
					  			//display7Seg1(led_buffer[]);
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	4836      	ldr	r0, [pc, #216]	; (800099c <fsm+0x5c8>)
 80008c2:	f001 fb9c 	bl	8001ffe <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80008c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ca:	4835      	ldr	r0, [pc, #212]	; (80009a0 <fsm+0x5cc>)
 80008cc:	f001 fb97 	bl	8001ffe <HAL_GPIO_TogglePin>
	 			setTimer1(time);
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <fsm+0x5d8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 feab 	bl	8001630 <setTimer1>
			}
			if(isButton3Pressed()){
 80008da:	f7ff fd0f 	bl	80002fc <isButton3Pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d012      	beq.n	800090a <fsm+0x536>
				green_val+=GREEN_INC;
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <fsm+0x5e8>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <fsm+0x5ec>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <fsm+0x5e8>)
 80008f0:	6013      	str	r3, [r2, #0]
				updateBuffer(mode+1, green_val);
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <fsm+0x5e4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a30      	ldr	r2, [pc, #192]	; (80009bc <fsm+0x5e8>)
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fd30 	bl	8001364 <updateBuffer>
				GREEN_INC=0;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <fsm+0x5ec>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed()){
 800090a:	f7ff fc1f 	bl	800014c <isButton1Pressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d03f      	beq.n	8000994 <fsm+0x5c0>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin ,1) ;
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	4820      	ldr	r0, [pc, #128]	; (800099c <fsm+0x5c8>)
 800091c:	f001 fb57 	bl	8001fce <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port , LED_GREEN2_Pin ,1) ;
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	481e      	ldr	r0, [pc, #120]	; (80009a0 <fsm+0x5cc>)
 8000928:	f001 fb51 	bl	8001fce <HAL_GPIO_WritePin>
				setTimer1(red_val*time*2);
 800092c:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <fsm+0x5f4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <fsm+0x5d8>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fe78 	bl	8001630 <setTimer1>
				setTimer2(green_val*time*2);
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <fsm+0x5e8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <fsm+0x5d8>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fe82 	bl	8001658 <setTimer2>
				status1=AUTO_RED;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <fsm+0x5f8>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
				status2=AUTO_GREEN;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <fsm+0x5fc>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
				count1=red_val;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <fsm+0x5f4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <fsm+0x600>)
 8000966:	6013      	str	r3, [r2, #0]
				count2=green_val;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <fsm+0x5e8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <fsm+0x604>)
 800096e:	6013      	str	r3, [r2, #0]
				key1=1;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <fsm+0x608>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
				key2=1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <fsm+0x60c>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
				mode=0;}
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <fsm+0x5e4>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
			break;
 8000982:	e007      	b.n	8000994 <fsm+0x5c0>
		default:
			break;
 8000984:	bf00      	nop
 8000986:	e006      	b.n	8000996 <fsm+0x5c2>
			break;
 8000988:	bf00      	nop
 800098a:	e004      	b.n	8000996 <fsm+0x5c2>
			break;
 800098c:	bf00      	nop
 800098e:	e002      	b.n	8000996 <fsm+0x5c2>
			break;
 8000990:	bf00      	nop
 8000992:	e000      	b.n	8000996 <fsm+0x5c2>
			break;
 8000994:	bf00      	nop

	}
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	200000f4 	.word	0x200000f4
 80009a8:	20000040 	.word	0x20000040
 80009ac:	08003021 	.word	0x08003021
 80009b0:	20000038 	.word	0x20000038
 80009b4:	200000ec 	.word	0x200000ec
 80009b8:	20000100 	.word	0x20000100
 80009bc:	2000003c 	.word	0x2000003c
 80009c0:	200000f0 	.word	0x200000f0
 80009c4:	20000110 	.word	0x20000110
 80009c8:	20000034 	.word	0x20000034
 80009cc:	200000f8 	.word	0x200000f8
 80009d0:	200000fc 	.word	0x200000fc
 80009d4:	20000128 	.word	0x20000128
 80009d8:	20000124 	.word	0x20000124
 80009dc:	20000104 	.word	0x20000104
 80009e0:	20000108 	.word	0x20000108

080009e4 <fsm_automatic_run>:
 */

#include "fsm_auto.h"


void fsm_automatic_run(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	4823      	ldr	r0, [pc, #140]	; (8000a7c <fsm_automatic_run+0x98>)
 80009f0:	f001 faed 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fa:	4820      	ldr	r0, [pc, #128]	; (8000a7c <fsm_automatic_run+0x98>)
 80009fc:	f001 fae7 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	481e      	ldr	r0, [pc, #120]	; (8000a80 <fsm_automatic_run+0x9c>)
 8000a08:	f001 fae1 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <fsm_automatic_run+0x9c>)
 8000a14:	f001 fadb 	bl	8001fce <HAL_GPIO_WritePin>
	fsm_auto1_run();
 8000a18:	f000 f840 	bl	8000a9c <fsm_auto1_run>
	fsm_auto2_run();
 8000a1c:	f000 f8e2 	bl	8000be4 <fsm_auto2_run>
	if(timer3_flag==1&&key1==1&&key2==1){
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <fsm_automatic_run+0xa0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d127      	bne.n	8000a78 <fsm_automatic_run+0x94>
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <fsm_automatic_run+0xa4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d123      	bne.n	8000a78 <fsm_automatic_run+0x94>
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <fsm_automatic_run+0xa8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d11f      	bne.n	8000a78 <fsm_automatic_run+0x94>
		display7Seg2(count2);
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <fsm_automatic_run+0xac>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fb01 	bl	8001044 <display7Seg2>
		display7Seg1(count1);
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <fsm_automatic_run+0xb0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f96c 	bl	8000d24 <display7Seg1>

		count1--;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <fsm_automatic_run+0xb0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <fsm_automatic_run+0xb0>)
 8000a54:	6013      	str	r3, [r2, #0]
		count2--;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <fsm_automatic_run+0xac>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <fsm_automatic_run+0xac>)
 8000a5e:	6013      	str	r3, [r2, #0]
		key1=0;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <fsm_automatic_run+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
		key2=0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <fsm_automatic_run+0xa8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
		setTimer3(time*2);
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <fsm_automatic_run+0xb4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fe04 	bl	8001680 <setTimer3>
				}




}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	20000120 	.word	0x20000120
 8000a88:	20000104 	.word	0x20000104
 8000a8c:	20000108 	.word	0x20000108
 8000a90:	20000124 	.word	0x20000124
 8000a94:	20000128 	.word	0x20000128
 8000a98:	08003021 	.word	0x08003021

08000a9c <fsm_auto1_run>:
void fsm_auto1_run(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

	switch(status1){
 8000aa0:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <fsm_auto1_run+0x128>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	f200 8089 	bhi.w	8000bbc <fsm_auto1_run+0x120>
 8000aaa:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <fsm_auto1_run+0x14>)
 8000aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000b09 	.word	0x08000b09
 8000ab8:	08000b45 	.word	0x08000b45
 8000abc:	08000b81 	.word	0x08000b81
		case INIT:
			status1=AUTO_RED;
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <fsm_auto1_run+0x128>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
			setLEDRED1();
 8000ac6:	f000 fecb 	bl	8001860 <setLEDRED1>

			count1=red_val;
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <fsm_auto1_run+0x12c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <fsm_auto1_run+0x130>)
 8000ad0:	6013      	str	r3, [r2, #0]
			display7Seg1(count1);
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <fsm_auto1_run+0x130>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f924 	bl	8000d24 <display7Seg1>
			count1--;
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <fsm_auto1_run+0x130>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <fsm_auto1_run+0x130>)
 8000ae4:	6013      	str	r3, [r2, #0]

			setTimer3(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fdca 	bl	8001680 <setTimer3>
			key1=1;
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
			setTimer1(red_val*time*2);
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <fsm_auto1_run+0x12c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a37      	ldr	r2, [pc, #220]	; (8000bd4 <fsm_auto1_run+0x138>)
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fd95 	bl	8001630 <setTimer1>
			break;
 8000b06:	e05a      	b.n	8000bbe <fsm_auto1_run+0x122>
		case AUTO_RED:
			setLEDRED1();
 8000b08:	f000 feaa 	bl	8001860 <setLEDRED1>
			if(timer1_flag==1){
 8000b0c:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <fsm_auto1_run+0x13c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d113      	bne.n	8000b3c <fsm_auto1_run+0xa0>
					count1=green_val;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <fsm_auto1_run+0x140>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <fsm_auto1_run+0x130>)
 8000b1a:	6013      	str	r3, [r2, #0]
					status1=AUTO_GREEN;
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <fsm_auto1_run+0x128>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	601a      	str	r2, [r3, #0]
					key1=1;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
					setTimer1(green_val*time*2);
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <fsm_auto1_run+0x140>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <fsm_auto1_run+0x138>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fd7a 	bl	8001630 <setTimer1>


			}
			key1=1;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
			break;
 8000b42:	e03c      	b.n	8000bbe <fsm_auto1_run+0x122>
		case AUTO_GREEN:
			setLEDGREEN1();
 8000b44:	f000 fea4 	bl	8001890 <setLEDGREEN1>
			if(timer1_flag==1){
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <fsm_auto1_run+0x13c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d113      	bne.n	8000b78 <fsm_auto1_run+0xdc>
				count1=yellow_val;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <fsm_auto1_run+0x144>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <fsm_auto1_run+0x130>)
 8000b56:	6013      	str	r3, [r2, #0]
				status1=AUTO_YELLOW;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <fsm_auto1_run+0x128>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
				key1=1;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_val*time*2);
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <fsm_auto1_run+0x144>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <fsm_auto1_run+0x138>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fd5c 	bl	8001630 <setTimer1>
			}
			key1=1;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
			break;
 8000b7e:	e01e      	b.n	8000bbe <fsm_auto1_run+0x122>
		case AUTO_YELLOW:
			setLEDYELLOW1();
 8000b80:	f000 fe9e 	bl	80018c0 <setLEDYELLOW1>
			if(timer1_flag==1){
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <fsm_auto1_run+0x13c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d113      	bne.n	8000bb4 <fsm_auto1_run+0x118>
				count1=red_val;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <fsm_auto1_run+0x12c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <fsm_auto1_run+0x130>)
 8000b92:	6013      	str	r3, [r2, #0]
				status1=AUTO_RED;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <fsm_auto1_run+0x128>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
				key1=1;
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
				setTimer1(red_val*time*2);
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <fsm_auto1_run+0x12c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <fsm_auto1_run+0x138>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fd3e 	bl	8001630 <setTimer1>

			}
			key1=1;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <fsm_auto1_run+0x134>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
			break;
 8000bba:	e000      	b.n	8000bbe <fsm_auto1_run+0x122>
		default:
			break;
 8000bbc:	bf00      	nop
		}


}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	20000034 	.word	0x20000034
 8000bcc:	20000128 	.word	0x20000128
 8000bd0:	20000104 	.word	0x20000104
 8000bd4:	08003021 	.word	0x08003021
 8000bd8:	20000110 	.word	0x20000110
 8000bdc:	2000003c 	.word	0x2000003c
 8000be0:	20000038 	.word	0x20000038

08000be4 <fsm_auto2_run>:
void fsm_auto2_run(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	switch(status2){
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <fsm_auto2_run+0x120>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	f200 8086 	bhi.w	8000cfe <fsm_auto2_run+0x11a>
 8000bf2:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <fsm_auto2_run+0x14>)
 8000bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c4b 	.word	0x08000c4b
 8000c00:	08000c87 	.word	0x08000c87
 8000c04:	08000cc3 	.word	0x08000cc3
		case INIT:
			status2=AUTO_GREEN;
 8000c08:	4b3e      	ldr	r3, [pc, #248]	; (8000d04 <fsm_auto2_run+0x120>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	601a      	str	r2, [r3, #0]
			setLEDGREEN2();
 8000c0e:	f000 fe87 	bl	8001920 <setLEDGREEN2>

			count2=green_val;
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <fsm_auto2_run+0x124>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c18:	6013      	str	r3, [r2, #0]
			display7Seg2(count2);
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fa10 	bl	8001044 <display7Seg2>
			count2--;
 8000c24:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	4a38      	ldr	r2, [pc, #224]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c2c:	6013      	str	r3, [r2, #0]
			setTimer2(green_val*time*2);
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <fsm_auto2_run+0x124>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a37      	ldr	r2, [pc, #220]	; (8000d10 <fsm_auto2_run+0x12c>)
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fd0b 	bl	8001658 <setTimer2>
			key2=1;
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <fsm_auto2_run+0x130>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
			break;
 8000c48:	e05a      	b.n	8000d00 <fsm_auto2_run+0x11c>
		case AUTO_RED:
			setLEDRED2();
 8000c4a:	f000 fe51 	bl	80018f0 <setLEDRED2>
			if(timer2_flag==1){
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <fsm_auto2_run+0x134>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d113      	bne.n	8000c7e <fsm_auto2_run+0x9a>
				count2=green_val;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <fsm_auto2_run+0x124>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c5c:	6013      	str	r3, [r2, #0]
				status2=AUTO_GREEN;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <fsm_auto2_run+0x120>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	601a      	str	r2, [r3, #0]
				key2=1;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <fsm_auto2_run+0x130>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
				setTimer2(green_val*time*2);
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <fsm_auto2_run+0x124>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <fsm_auto2_run+0x12c>)
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fced 	bl	8001658 <setTimer2>

			}
			key2=1;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <fsm_auto2_run+0x130>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
			break;
 8000c84:	e03c      	b.n	8000d00 <fsm_auto2_run+0x11c>
		case AUTO_GREEN:
			setLEDGREEN2();
 8000c86:	f000 fe4b 	bl	8001920 <setLEDGREEN2>
			if(timer2_flag==1){
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <fsm_auto2_run+0x134>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d113      	bne.n	8000cba <fsm_auto2_run+0xd6>
				count2=yellow_val;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <fsm_auto2_run+0x138>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <fsm_auto2_run+0x128>)
 8000c98:	6013      	str	r3, [r2, #0]
				status2=AUTO_YELLOW;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <fsm_auto2_run+0x120>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	601a      	str	r2, [r3, #0]
				key2=1;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <fsm_auto2_run+0x130>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
				setTimer2(yellow_val*time*2);
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <fsm_auto2_run+0x138>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <fsm_auto2_run+0x12c>)
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fccf 	bl	8001658 <setTimer2>
			}
			key2=1;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <fsm_auto2_run+0x130>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
			break;
 8000cc0:	e01e      	b.n	8000d00 <fsm_auto2_run+0x11c>
		case AUTO_YELLOW:
			setLEDYELLOW2();
 8000cc2:	f000 fe45 	bl	8001950 <setLEDYELLOW2>
			if(timer2_flag==1){
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <fsm_auto2_run+0x134>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d113      	bne.n	8000cf6 <fsm_auto2_run+0x112>
				count2=red_val;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <fsm_auto2_run+0x13c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <fsm_auto2_run+0x128>)
 8000cd4:	6013      	str	r3, [r2, #0]
				status2=AUTO_RED;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <fsm_auto2_run+0x120>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
				key2=1;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <fsm_auto2_run+0x130>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
				setTimer2(red_val*time*2);
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <fsm_auto2_run+0x13c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <fsm_auto2_run+0x12c>)
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fcb1 	bl	8001658 <setTimer2>
			}
			key2=1;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <fsm_auto2_run+0x130>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
			break;
 8000cfc:	e000      	b.n	8000d00 <fsm_auto2_run+0x11c>
		default:
			break;
 8000cfe:	bf00      	nop
		}

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200000fc 	.word	0x200000fc
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	20000124 	.word	0x20000124
 8000d10:	08003021 	.word	0x08003021
 8000d14:	20000108 	.word	0x20000108
 8000d18:	20000118 	.word	0x20000118
 8000d1c:	20000038 	.word	0x20000038
 8000d20:	20000034 	.word	0x20000034

08000d24 <display7Seg1>:

int key1=0;
int key2=0;

void display7Seg1(int num)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	f200 8180 	bhi.w	8001034 <display7Seg1+0x310>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <display7Seg1+0x18>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d65 	.word	0x08000d65
 8000d40:	08000dad 	.word	0x08000dad
 8000d44:	08000df5 	.word	0x08000df5
 8000d48:	08000e3d 	.word	0x08000e3d
 8000d4c:	08000e85 	.word	0x08000e85
 8000d50:	08000ecd 	.word	0x08000ecd
 8000d54:	08000f15 	.word	0x08000f15
 8000d58:	08000f5d 	.word	0x08000f5d
 8000d5c:	08000fa5 	.word	0x08000fa5
 8000d60:	08000fed 	.word	0x08000fed
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0 ) ;
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	48b5      	ldr	r0, [pc, #724]	; (8001040 <display7Seg1+0x31c>)
 8000d6a:	f001 f930 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0 ) ;
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	48b3      	ldr	r0, [pc, #716]	; (8001040 <display7Seg1+0x31c>)
 8000d74:	f001 f92b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	48b0      	ldr	r0, [pc, #704]	; (8001040 <display7Seg1+0x31c>)
 8000d7e:	f001 f926 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000d82:	2200      	movs	r2, #0
 8000d84:	2108      	movs	r1, #8
 8000d86:	48ae      	ldr	r0, [pc, #696]	; (8001040 <display7Seg1+0x31c>)
 8000d88:	f001 f921 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,0) ;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	48ab      	ldr	r0, [pc, #684]	; (8001040 <display7Seg1+0x31c>)
 8000d92:	f001 f91c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	48a9      	ldr	r0, [pc, #676]	; (8001040 <display7Seg1+0x31c>)
 8000d9c:	f001 f917 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,1) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	48a6      	ldr	r0, [pc, #664]	; (8001040 <display7Seg1+0x31c>)
 8000da6:	f001 f912 	bl	8001fce <HAL_GPIO_WritePin>
			break;
 8000daa:	e144      	b.n	8001036 <display7Seg1+0x312>
	case 1:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,1) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	2101      	movs	r1, #1
 8000db0:	48a3      	ldr	r0, [pc, #652]	; (8001040 <display7Seg1+0x31c>)
 8000db2:	f001 f90c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	48a1      	ldr	r0, [pc, #644]	; (8001040 <display7Seg1+0x31c>)
 8000dbc:	f001 f907 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	489e      	ldr	r0, [pc, #632]	; (8001040 <display7Seg1+0x31c>)
 8000dc6:	f001 f902 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,1) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2108      	movs	r1, #8
 8000dce:	489c      	ldr	r0, [pc, #624]	; (8001040 <display7Seg1+0x31c>)
 8000dd0:	f001 f8fd 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4899      	ldr	r0, [pc, #612]	; (8001040 <display7Seg1+0x31c>)
 8000dda:	f001 f8f8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,1) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	4897      	ldr	r0, [pc, #604]	; (8001040 <display7Seg1+0x31c>)
 8000de4:	f001 f8f3 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,1) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4894      	ldr	r0, [pc, #592]	; (8001040 <display7Seg1+0x31c>)
 8000dee:	f001 f8ee 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000df2:	e120      	b.n	8001036 <display7Seg1+0x312>
	case 2:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	4891      	ldr	r0, [pc, #580]	; (8001040 <display7Seg1+0x31c>)
 8000dfa:	f001 f8e8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	488f      	ldr	r0, [pc, #572]	; (8001040 <display7Seg1+0x31c>)
 8000e04:	f001 f8e3 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,1) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	488c      	ldr	r0, [pc, #560]	; (8001040 <display7Seg1+0x31c>)
 8000e0e:	f001 f8de 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	488a      	ldr	r0, [pc, #552]	; (8001040 <display7Seg1+0x31c>)
 8000e18:	f001 f8d9 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,0) ;
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4887      	ldr	r0, [pc, #540]	; (8001040 <display7Seg1+0x31c>)
 8000e22:	f001 f8d4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,1) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4885      	ldr	r0, [pc, #532]	; (8001040 <display7Seg1+0x31c>)
 8000e2c:	f001 f8cf 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	4882      	ldr	r0, [pc, #520]	; (8001040 <display7Seg1+0x31c>)
 8000e36:	f001 f8ca 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000e3a:	e0fc      	b.n	8001036 <display7Seg1+0x312>
	case 3:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2101      	movs	r1, #1
 8000e40:	487f      	ldr	r0, [pc, #508]	; (8001040 <display7Seg1+0x31c>)
 8000e42:	f001 f8c4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000e46:	2200      	movs	r2, #0
 8000e48:	2102      	movs	r1, #2
 8000e4a:	487d      	ldr	r0, [pc, #500]	; (8001040 <display7Seg1+0x31c>)
 8000e4c:	f001 f8bf 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	487a      	ldr	r0, [pc, #488]	; (8001040 <display7Seg1+0x31c>)
 8000e56:	f001 f8ba 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4878      	ldr	r0, [pc, #480]	; (8001040 <display7Seg1+0x31c>)
 8000e60:	f001 f8b5 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	2110      	movs	r1, #16
 8000e68:	4875      	ldr	r0, [pc, #468]	; (8001040 <display7Seg1+0x31c>)
 8000e6a:	f001 f8b0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,1) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2120      	movs	r1, #32
 8000e72:	4873      	ldr	r0, [pc, #460]	; (8001040 <display7Seg1+0x31c>)
 8000e74:	f001 f8ab 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4870      	ldr	r0, [pc, #448]	; (8001040 <display7Seg1+0x31c>)
 8000e7e:	f001 f8a6 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000e82:	e0d8      	b.n	8001036 <display7Seg1+0x312>
	case 4:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,1) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	2101      	movs	r1, #1
 8000e88:	486d      	ldr	r0, [pc, #436]	; (8001040 <display7Seg1+0x31c>)
 8000e8a:	f001 f8a0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2102      	movs	r1, #2
 8000e92:	486b      	ldr	r0, [pc, #428]	; (8001040 <display7Seg1+0x31c>)
 8000e94:	f001 f89b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	4868      	ldr	r0, [pc, #416]	; (8001040 <display7Seg1+0x31c>)
 8000e9e:	f001 f896 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,1) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4866      	ldr	r0, [pc, #408]	; (8001040 <display7Seg1+0x31c>)
 8000ea8:	f001 f891 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4863      	ldr	r0, [pc, #396]	; (8001040 <display7Seg1+0x31c>)
 8000eb2:	f001 f88c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2120      	movs	r1, #32
 8000eba:	4861      	ldr	r0, [pc, #388]	; (8001040 <display7Seg1+0x31c>)
 8000ebc:	f001 f887 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	485e      	ldr	r0, [pc, #376]	; (8001040 <display7Seg1+0x31c>)
 8000ec6:	f001 f882 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000eca:	e0b4      	b.n	8001036 <display7Seg1+0x312>
	case 5:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	485b      	ldr	r0, [pc, #364]	; (8001040 <display7Seg1+0x31c>)
 8000ed2:	f001 f87c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,1) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4859      	ldr	r0, [pc, #356]	; (8001040 <display7Seg1+0x31c>)
 8000edc:	f001 f877 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4856      	ldr	r0, [pc, #344]	; (8001040 <display7Seg1+0x31c>)
 8000ee6:	f001 f872 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4854      	ldr	r0, [pc, #336]	; (8001040 <display7Seg1+0x31c>)
 8000ef0:	f001 f86d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4851      	ldr	r0, [pc, #324]	; (8001040 <display7Seg1+0x31c>)
 8000efa:	f001 f868 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	484f      	ldr	r0, [pc, #316]	; (8001040 <display7Seg1+0x31c>)
 8000f04:	f001 f863 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	484c      	ldr	r0, [pc, #304]	; (8001040 <display7Seg1+0x31c>)
 8000f0e:	f001 f85e 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000f12:	e090      	b.n	8001036 <display7Seg1+0x312>
	case 6:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	4849      	ldr	r0, [pc, #292]	; (8001040 <display7Seg1+0x31c>)
 8000f1a:	f001 f858 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,1) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2102      	movs	r1, #2
 8000f22:	4847      	ldr	r0, [pc, #284]	; (8001040 <display7Seg1+0x31c>)
 8000f24:	f001 f853 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4844      	ldr	r0, [pc, #272]	; (8001040 <display7Seg1+0x31c>)
 8000f2e:	f001 f84e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000f32:	2200      	movs	r2, #0
 8000f34:	2108      	movs	r1, #8
 8000f36:	4842      	ldr	r0, [pc, #264]	; (8001040 <display7Seg1+0x31c>)
 8000f38:	f001 f849 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,0) ;
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	483f      	ldr	r0, [pc, #252]	; (8001040 <display7Seg1+0x31c>)
 8000f42:	f001 f844 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 8000f46:	2200      	movs	r2, #0
 8000f48:	2120      	movs	r1, #32
 8000f4a:	483d      	ldr	r0, [pc, #244]	; (8001040 <display7Seg1+0x31c>)
 8000f4c:	f001 f83f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	483a      	ldr	r0, [pc, #232]	; (8001040 <display7Seg1+0x31c>)
 8000f56:	f001 f83a 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000f5a:	e06c      	b.n	8001036 <display7Seg1+0x312>
	case 7:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4837      	ldr	r0, [pc, #220]	; (8001040 <display7Seg1+0x31c>)
 8000f62:	f001 f834 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000f66:	2200      	movs	r2, #0
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <display7Seg1+0x31c>)
 8000f6c:	f001 f82f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	4832      	ldr	r0, [pc, #200]	; (8001040 <display7Seg1+0x31c>)
 8000f76:	f001 f82a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,1) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <display7Seg1+0x31c>)
 8000f80:	f001 f825 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	482d      	ldr	r0, [pc, #180]	; (8001040 <display7Seg1+0x31c>)
 8000f8a:	f001 f820 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,1) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2120      	movs	r1, #32
 8000f92:	482b      	ldr	r0, [pc, #172]	; (8001040 <display7Seg1+0x31c>)
 8000f94:	f001 f81b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,1) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4828      	ldr	r0, [pc, #160]	; (8001040 <display7Seg1+0x31c>)
 8000f9e:	f001 f816 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000fa2:	e048      	b.n	8001036 <display7Seg1+0x312>
	case 8:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4825      	ldr	r0, [pc, #148]	; (8001040 <display7Seg1+0x31c>)
 8000faa:	f001 f810 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4823      	ldr	r0, [pc, #140]	; (8001040 <display7Seg1+0x31c>)
 8000fb4:	f001 f80b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <display7Seg1+0x31c>)
 8000fbe:	f001 f806 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	481e      	ldr	r0, [pc, #120]	; (8001040 <display7Seg1+0x31c>)
 8000fc8:	f001 f801 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,0) ;
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2110      	movs	r1, #16
 8000fd0:	481b      	ldr	r0, [pc, #108]	; (8001040 <display7Seg1+0x31c>)
 8000fd2:	f000 fffc 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <display7Seg1+0x31c>)
 8000fdc:	f000 fff7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <display7Seg1+0x31c>)
 8000fe6:	f000 fff2 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8000fea:	e024      	b.n	8001036 <display7Seg1+0x312>
	case 9:
		HAL_GPIO_WritePin ( SEG_1_0_GPIO_Port , SEG_1_0_Pin ,0) ;
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <display7Seg1+0x31c>)
 8000ff2:	f000 ffec 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_1_GPIO_Port , SEG_1_1_Pin ,0) ;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <display7Seg1+0x31c>)
 8000ffc:	f000 ffe7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_2_GPIO_Port , SEG_1_2_Pin ,0) ;
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <display7Seg1+0x31c>)
 8001006:	f000 ffe2 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_3_GPIO_Port , SEG_1_3_Pin ,0) ;
 800100a:	2200      	movs	r2, #0
 800100c:	2108      	movs	r1, #8
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <display7Seg1+0x31c>)
 8001010:	f000 ffdd 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_4_GPIO_Port , SEG_1_4_Pin ,1) ;
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <display7Seg1+0x31c>)
 800101a:	f000 ffd8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_5_GPIO_Port , SEG_1_5_Pin ,0) ;
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <display7Seg1+0x31c>)
 8001024:	f000 ffd3 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_1_6_GPIO_Port , SEG_1_6_Pin ,0) ;
 8001028:	2200      	movs	r2, #0
 800102a:	2140      	movs	r1, #64	; 0x40
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <display7Seg1+0x31c>)
 800102e:	f000 ffce 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8001032:	e000      	b.n	8001036 <display7Seg1+0x312>
	default :
		break;
 8001034:	bf00      	nop
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010800 	.word	0x40010800

08001044 <display7Seg2>:

void display7Seg2(int num)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b09      	cmp	r3, #9
 8001050:	f200 8180 	bhi.w	8001354 <display7Seg2+0x310>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <display7Seg2+0x18>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	08001085 	.word	0x08001085
 8001060:	080010cd 	.word	0x080010cd
 8001064:	08001115 	.word	0x08001115
 8001068:	0800115d 	.word	0x0800115d
 800106c:	080011a5 	.word	0x080011a5
 8001070:	080011ed 	.word	0x080011ed
 8001074:	08001235 	.word	0x08001235
 8001078:	0800127d 	.word	0x0800127d
 800107c:	080012c5 	.word	0x080012c5
 8001080:	0800130d 	.word	0x0800130d
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0 ) ;
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	48b5      	ldr	r0, [pc, #724]	; (8001360 <display7Seg2+0x31c>)
 800108a:	f000 ffa0 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0 ) ;
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	48b3      	ldr	r0, [pc, #716]	; (8001360 <display7Seg2+0x31c>)
 8001094:	f000 ff9b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001098:	2200      	movs	r2, #0
 800109a:	2104      	movs	r1, #4
 800109c:	48b0      	ldr	r0, [pc, #704]	; (8001360 <display7Seg2+0x31c>)
 800109e:	f000 ff96 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 80010a2:	2200      	movs	r2, #0
 80010a4:	2108      	movs	r1, #8
 80010a6:	48ae      	ldr	r0, [pc, #696]	; (8001360 <display7Seg2+0x31c>)
 80010a8:	f000 ff91 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,0) ;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	48ab      	ldr	r0, [pc, #684]	; (8001360 <display7Seg2+0x31c>)
 80010b2:	f000 ff8c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	48a9      	ldr	r0, [pc, #676]	; (8001360 <display7Seg2+0x31c>)
 80010bc:	f000 ff87 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,1) ;
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	48a6      	ldr	r0, [pc, #664]	; (8001360 <display7Seg2+0x31c>)
 80010c6:	f000 ff82 	bl	8001fce <HAL_GPIO_WritePin>
			break;
 80010ca:	e144      	b.n	8001356 <display7Seg2+0x312>
	case 1:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,1) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	48a3      	ldr	r0, [pc, #652]	; (8001360 <display7Seg2+0x31c>)
 80010d2:	f000 ff7c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	48a1      	ldr	r0, [pc, #644]	; (8001360 <display7Seg2+0x31c>)
 80010dc:	f000 ff77 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	489e      	ldr	r0, [pc, #632]	; (8001360 <display7Seg2+0x31c>)
 80010e6:	f000 ff72 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,1) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	489c      	ldr	r0, [pc, #624]	; (8001360 <display7Seg2+0x31c>)
 80010f0:	f000 ff6d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	2110      	movs	r1, #16
 80010f8:	4899      	ldr	r0, [pc, #612]	; (8001360 <display7Seg2+0x31c>)
 80010fa:	f000 ff68 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,1) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	2120      	movs	r1, #32
 8001102:	4897      	ldr	r0, [pc, #604]	; (8001360 <display7Seg2+0x31c>)
 8001104:	f000 ff63 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,1) ;
 8001108:	2201      	movs	r2, #1
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	4894      	ldr	r0, [pc, #592]	; (8001360 <display7Seg2+0x31c>)
 800110e:	f000 ff5e 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8001112:	e120      	b.n	8001356 <display7Seg2+0x312>
	case 2:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	4891      	ldr	r0, [pc, #580]	; (8001360 <display7Seg2+0x31c>)
 800111a:	f000 ff58 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	488f      	ldr	r0, [pc, #572]	; (8001360 <display7Seg2+0x31c>)
 8001124:	f000 ff53 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,1) ;
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	488c      	ldr	r0, [pc, #560]	; (8001360 <display7Seg2+0x31c>)
 800112e:	f000 ff4e 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	488a      	ldr	r0, [pc, #552]	; (8001360 <display7Seg2+0x31c>)
 8001138:	f000 ff49 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,0) ;
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4887      	ldr	r0, [pc, #540]	; (8001360 <display7Seg2+0x31c>)
 8001142:	f000 ff44 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,1) ;
 8001146:	2201      	movs	r2, #1
 8001148:	2120      	movs	r1, #32
 800114a:	4885      	ldr	r0, [pc, #532]	; (8001360 <display7Seg2+0x31c>)
 800114c:	f000 ff3f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001150:	2200      	movs	r2, #0
 8001152:	2140      	movs	r1, #64	; 0x40
 8001154:	4882      	ldr	r0, [pc, #520]	; (8001360 <display7Seg2+0x31c>)
 8001156:	f000 ff3a 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800115a:	e0fc      	b.n	8001356 <display7Seg2+0x312>
	case 3:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 800115c:	2200      	movs	r2, #0
 800115e:	2101      	movs	r1, #1
 8001160:	487f      	ldr	r0, [pc, #508]	; (8001360 <display7Seg2+0x31c>)
 8001162:	f000 ff34 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	487d      	ldr	r0, [pc, #500]	; (8001360 <display7Seg2+0x31c>)
 800116c:	f000 ff2f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001170:	2200      	movs	r2, #0
 8001172:	2104      	movs	r1, #4
 8001174:	487a      	ldr	r0, [pc, #488]	; (8001360 <display7Seg2+0x31c>)
 8001176:	f000 ff2a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 800117a:	2200      	movs	r2, #0
 800117c:	2108      	movs	r1, #8
 800117e:	4878      	ldr	r0, [pc, #480]	; (8001360 <display7Seg2+0x31c>)
 8001180:	f000 ff25 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 8001184:	2201      	movs	r2, #1
 8001186:	2110      	movs	r1, #16
 8001188:	4875      	ldr	r0, [pc, #468]	; (8001360 <display7Seg2+0x31c>)
 800118a:	f000 ff20 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,1) ;
 800118e:	2201      	movs	r2, #1
 8001190:	2120      	movs	r1, #32
 8001192:	4873      	ldr	r0, [pc, #460]	; (8001360 <display7Seg2+0x31c>)
 8001194:	f000 ff1b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4870      	ldr	r0, [pc, #448]	; (8001360 <display7Seg2+0x31c>)
 800119e:	f000 ff16 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80011a2:	e0d8      	b.n	8001356 <display7Seg2+0x312>
	case 4:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,1) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	2101      	movs	r1, #1
 80011a8:	486d      	ldr	r0, [pc, #436]	; (8001360 <display7Seg2+0x31c>)
 80011aa:	f000 ff10 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	486b      	ldr	r0, [pc, #428]	; (8001360 <display7Seg2+0x31c>)
 80011b4:	f000 ff0b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 80011b8:	2200      	movs	r2, #0
 80011ba:	2104      	movs	r1, #4
 80011bc:	4868      	ldr	r0, [pc, #416]	; (8001360 <display7Seg2+0x31c>)
 80011be:	f000 ff06 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,1) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	2108      	movs	r1, #8
 80011c6:	4866      	ldr	r0, [pc, #408]	; (8001360 <display7Seg2+0x31c>)
 80011c8:	f000 ff01 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	2110      	movs	r1, #16
 80011d0:	4863      	ldr	r0, [pc, #396]	; (8001360 <display7Seg2+0x31c>)
 80011d2:	f000 fefc 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	4861      	ldr	r0, [pc, #388]	; (8001360 <display7Seg2+0x31c>)
 80011dc:	f000 fef7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	485e      	ldr	r0, [pc, #376]	; (8001360 <display7Seg2+0x31c>)
 80011e6:	f000 fef2 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80011ea:	e0b4      	b.n	8001356 <display7Seg2+0x312>
	case 5:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	485b      	ldr	r0, [pc, #364]	; (8001360 <display7Seg2+0x31c>)
 80011f2:	f000 feec 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,1) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	4859      	ldr	r0, [pc, #356]	; (8001360 <display7Seg2+0x31c>)
 80011fc:	f000 fee7 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001200:	2200      	movs	r2, #0
 8001202:	2104      	movs	r1, #4
 8001204:	4856      	ldr	r0, [pc, #344]	; (8001360 <display7Seg2+0x31c>)
 8001206:	f000 fee2 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4854      	ldr	r0, [pc, #336]	; (8001360 <display7Seg2+0x31c>)
 8001210:	f000 fedd 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 8001214:	2201      	movs	r2, #1
 8001216:	2110      	movs	r1, #16
 8001218:	4851      	ldr	r0, [pc, #324]	; (8001360 <display7Seg2+0x31c>)
 800121a:	f000 fed8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	484f      	ldr	r0, [pc, #316]	; (8001360 <display7Seg2+0x31c>)
 8001224:	f000 fed3 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	484c      	ldr	r0, [pc, #304]	; (8001360 <display7Seg2+0x31c>)
 800122e:	f000 fece 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8001232:	e090      	b.n	8001356 <display7Seg2+0x312>
	case 6:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	4849      	ldr	r0, [pc, #292]	; (8001360 <display7Seg2+0x31c>)
 800123a:	f000 fec8 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,1) ;
 800123e:	2201      	movs	r2, #1
 8001240:	2102      	movs	r1, #2
 8001242:	4847      	ldr	r0, [pc, #284]	; (8001360 <display7Seg2+0x31c>)
 8001244:	f000 fec3 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	4844      	ldr	r0, [pc, #272]	; (8001360 <display7Seg2+0x31c>)
 800124e:	f000 febe 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 8001252:	2200      	movs	r2, #0
 8001254:	2108      	movs	r1, #8
 8001256:	4842      	ldr	r0, [pc, #264]	; (8001360 <display7Seg2+0x31c>)
 8001258:	f000 feb9 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,0) ;
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	483f      	ldr	r0, [pc, #252]	; (8001360 <display7Seg2+0x31c>)
 8001262:	f000 feb4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	483d      	ldr	r0, [pc, #244]	; (8001360 <display7Seg2+0x31c>)
 800126c:	f000 feaf 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001270:	2200      	movs	r2, #0
 8001272:	2140      	movs	r1, #64	; 0x40
 8001274:	483a      	ldr	r0, [pc, #232]	; (8001360 <display7Seg2+0x31c>)
 8001276:	f000 feaa 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800127a:	e06c      	b.n	8001356 <display7Seg2+0x312>
	case 7:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 800127c:	2200      	movs	r2, #0
 800127e:	2101      	movs	r1, #1
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <display7Seg2+0x31c>)
 8001282:	f000 fea4 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 8001286:	2200      	movs	r2, #0
 8001288:	2102      	movs	r1, #2
 800128a:	4835      	ldr	r0, [pc, #212]	; (8001360 <display7Seg2+0x31c>)
 800128c:	f000 fe9f 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001290:	2200      	movs	r2, #0
 8001292:	2104      	movs	r1, #4
 8001294:	4832      	ldr	r0, [pc, #200]	; (8001360 <display7Seg2+0x31c>)
 8001296:	f000 fe9a 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,1) ;
 800129a:	2201      	movs	r2, #1
 800129c:	2108      	movs	r1, #8
 800129e:	4830      	ldr	r0, [pc, #192]	; (8001360 <display7Seg2+0x31c>)
 80012a0:	f000 fe95 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 80012a4:	2201      	movs	r2, #1
 80012a6:	2110      	movs	r1, #16
 80012a8:	482d      	ldr	r0, [pc, #180]	; (8001360 <display7Seg2+0x31c>)
 80012aa:	f000 fe90 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,1) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	2120      	movs	r1, #32
 80012b2:	482b      	ldr	r0, [pc, #172]	; (8001360 <display7Seg2+0x31c>)
 80012b4:	f000 fe8b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,1) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <display7Seg2+0x31c>)
 80012be:	f000 fe86 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 80012c2:	e048      	b.n	8001356 <display7Seg2+0x312>
	case 8:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <display7Seg2+0x31c>)
 80012ca:	f000 fe80 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 80012ce:	2200      	movs	r2, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <display7Seg2+0x31c>)
 80012d4:	f000 fe7b 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 80012d8:	2200      	movs	r2, #0
 80012da:	2104      	movs	r1, #4
 80012dc:	4820      	ldr	r0, [pc, #128]	; (8001360 <display7Seg2+0x31c>)
 80012de:	f000 fe76 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 80012e2:	2200      	movs	r2, #0
 80012e4:	2108      	movs	r1, #8
 80012e6:	481e      	ldr	r0, [pc, #120]	; (8001360 <display7Seg2+0x31c>)
 80012e8:	f000 fe71 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,0) ;
 80012ec:	2200      	movs	r2, #0
 80012ee:	2110      	movs	r1, #16
 80012f0:	481b      	ldr	r0, [pc, #108]	; (8001360 <display7Seg2+0x31c>)
 80012f2:	f000 fe6c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <display7Seg2+0x31c>)
 80012fc:	f000 fe67 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001300:	2200      	movs	r2, #0
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4816      	ldr	r0, [pc, #88]	; (8001360 <display7Seg2+0x31c>)
 8001306:	f000 fe62 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 800130a:	e024      	b.n	8001356 <display7Seg2+0x312>
	case 9:
		HAL_GPIO_WritePin ( SEG_2_0_GPIO_Port , SEG_2_0_Pin ,0) ;
 800130c:	2200      	movs	r2, #0
 800130e:	2101      	movs	r1, #1
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <display7Seg2+0x31c>)
 8001312:	f000 fe5c 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_1_GPIO_Port , SEG_2_1_Pin ,0) ;
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <display7Seg2+0x31c>)
 800131c:	f000 fe57 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_2_GPIO_Port , SEG_2_2_Pin ,0) ;
 8001320:	2200      	movs	r2, #0
 8001322:	2104      	movs	r1, #4
 8001324:	480e      	ldr	r0, [pc, #56]	; (8001360 <display7Seg2+0x31c>)
 8001326:	f000 fe52 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_3_GPIO_Port , SEG_2_3_Pin ,0) ;
 800132a:	2200      	movs	r2, #0
 800132c:	2108      	movs	r1, #8
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <display7Seg2+0x31c>)
 8001330:	f000 fe4d 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_4_GPIO_Port , SEG_2_4_Pin ,1) ;
 8001334:	2201      	movs	r2, #1
 8001336:	2110      	movs	r1, #16
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <display7Seg2+0x31c>)
 800133a:	f000 fe48 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_5_GPIO_Port , SEG_2_5_Pin ,0) ;
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <display7Seg2+0x31c>)
 8001344:	f000 fe43 	bl	8001fce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG_2_6_GPIO_Port , SEG_2_6_Pin ,0) ;
 8001348:	2200      	movs	r2, #0
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <display7Seg2+0x31c>)
 800134e:	f000 fe3e 	bl	8001fce <HAL_GPIO_WritePin>
		break;
 8001352:	e000      	b.n	8001356 <display7Seg2+0x312>
	default :
		break;
 8001354:	bf00      	nop
	}
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40010c00 	.word	0x40010c00

08001364 <updateBuffer>:
	default :
		break ;
	}
}
void updateBuffer(int mode,int value)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	led_buffer[0]=mode/10;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <updateBuffer+0x70>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1092      	asrs	r2, r2, #2
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <updateBuffer+0x74>)
 800137e:	6013      	str	r3, [r2, #0]
	led_buffer[1]=mode%10;
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <updateBuffer+0x70>)
 8001384:	fb83 2301 	smull	r2, r3, r3, r1
 8001388:	109a      	asrs	r2, r3, #2
 800138a:	17cb      	asrs	r3, r1, #31
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	1aca      	subs	r2, r1, r3
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <updateBuffer+0x74>)
 800139a:	605a      	str	r2, [r3, #4]
	led_buffer[2]=value/10;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <updateBuffer+0x70>)
 80013a0:	fb82 1203 	smull	r1, r2, r2, r3
 80013a4:	1092      	asrs	r2, r2, #2
 80013a6:	17db      	asrs	r3, r3, #31
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <updateBuffer+0x74>)
 80013ac:	6093      	str	r3, [r2, #8]
	led_buffer[3]=value%10;
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <updateBuffer+0x70>)
 80013b2:	fb83 2301 	smull	r2, r3, r3, r1
 80013b6:	109a      	asrs	r2, r3, #2
 80013b8:	17cb      	asrs	r3, r1, #31
 80013ba:	1ad2      	subs	r2, r2, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	1aca      	subs	r2, r1, r3
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <updateBuffer+0x74>)
 80013c8:	60da      	str	r2, [r3, #12]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	66666667 	.word	0x66666667
 80013d8:	20000040 	.word	0x20000040

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e0:	f000 faf4 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e4:	f000 f81e 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f000 f8a4 	bl	8001534 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013ec:	f000 f856 	bl	800149c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <main+0x3c>)
 80013f2:	f001 fa55 	bl	80028a0 <HAL_TIM_Base_Start_IT>
 time=8000000/(( htim2.Init.Prescaler +1)* htim2.Init.Period *2);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <main+0x3c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <main+0x3c>)
 80013fe:	68d2      	ldr	r2, [r2, #12]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <main+0x40>)
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	461a      	mov	r2, r3
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <main+0x44>)
 8001410:	601a      	str	r2, [r3, #0]
  while (1)
    {
    /* USER CODE END WHILE */
	  	  //fsm();
	  	  fsm();
 8001412:	f7fe ffdf 	bl	80003d4 <fsm>
 8001416:	e7fc      	b.n	8001412 <main+0x36>
 8001418:	2000012c 	.word	0x2000012c
 800141c:	007a1200 	.word	0x007a1200
 8001420:	08003021 	.word	0x08003021

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b090      	sub	sp, #64	; 0x40
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	2228      	movs	r2, #40	; 0x28
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fdec 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fde8 	bl	8002030 <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001466:	f000 f8dd 	bl	8001624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146a:	230f      	movs	r3, #15
 800146c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f001 f854 	bl	8002530 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800148e:	f000 f8c9 	bl	8001624 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3740      	adds	r7, #64	; 0x40
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_TIM2_Init+0x94>)
 80014c2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d0:	220a      	movs	r2, #10
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM2_Init+0x94>)
 80014e2:	f001 f98d 	bl	8002800 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014ec:	f000 f89a 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0x94>)
 80014fe:	f001 fb23 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 f88c 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM2_Init+0x94>)
 800151a:	f001 fceb 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 f87e 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000012c 	.word	0x2000012c

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_GPIO_Init+0xbc>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xbc>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_GPIO_Init+0xbc>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_1_0_Pin|SEG_1_1_Pin|SEG_1_2_Pin|SEG_1_3_Pin
 8001578:	2200      	movs	r2, #0
 800157a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800157e:	481d      	ldr	r0, [pc, #116]	; (80015f4 <MX_GPIO_Init+0xc0>)
 8001580:	f000 fd25 	bl	8001fce <HAL_GPIO_WritePin>
                          |SEG_1_4_Pin|SEG_1_5_Pin|SEG_1_6_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_2_0_Pin|SEG_2_1_Pin|SEG_2_2_Pin|EN2_Pin
 8001584:	2200      	movs	r2, #0
 8001586:	f640 71ff 	movw	r1, #4095	; 0xfff
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <MX_GPIO_Init+0xc4>)
 800158c:	f000 fd1f 	bl	8001fce <HAL_GPIO_WritePin>
                          |SEG_2_6_Pin|LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_1_0_Pin SEG_1_1_Pin SEG_1_2_Pin SEG_1_3_Pin
                           SEG_1_4_Pin SEG_1_5_Pin SEG_1_6_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG_1_0_Pin|SEG_1_1_Pin|SEG_1_2_Pin|SEG_1_3_Pin
 8001590:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001594:	60bb      	str	r3, [r7, #8]
                          |SEG_1_4_Pin|SEG_1_5_Pin|SEG_1_6_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_GPIO_Init+0xc0>)
 80015aa:	f000 fb7f 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_2_0_Pin SEG_2_1_Pin SEG_2_2_Pin EN2_Pin
                           EN3_Pin SEG_2_3_Pin SEG_2_4_Pin SEG_2_5_Pin
                           SEG_2_6_Pin LED_RED2_Pin LED_YELLOW2_Pin LED_GREEN2_Pin */
  GPIO_InitStruct.Pin = SEG_2_0_Pin|SEG_2_1_Pin|SEG_2_2_Pin|EN2_Pin
 80015ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015b2:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|SEG_2_3_Pin|SEG_2_4_Pin|SEG_2_5_Pin
                          |SEG_2_6_Pin|LED_RED2_Pin|LED_YELLOW2_Pin|LED_GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2302      	movs	r3, #2
 80015be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4619      	mov	r1, r3
 80015c6:	480c      	ldr	r0, [pc, #48]	; (80015f8 <MX_GPIO_Init+0xc4>)
 80015c8:	f000 fb70 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin;
 80015cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0xc0>)
 80015e2:	f000 fb63 	bl	8001cac <HAL_GPIO_Init>

}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00

080015fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	timerRun1();
 8001604:	f000 f850 	bl	80016a8 <timerRun1>
	timerRun2();
 8001608:	f000 f868 	bl	80016dc <timerRun2>
	timerRun3();
 800160c:	f000 f880 	bl	8001710 <timerRun3>
	getKeyInput1();
 8001610:	f7fe fdba 	bl	8000188 <getKeyInput1>
	getKeyInput2();
 8001614:	f7fe fe24 	bl	8000260 <getKeyInput2>
	getKeyInput3();
 8001618:	f7fe fe8e 	bl	8000338 <getKeyInput3>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <setTimer1>:
int timer2_counter=0;
int timer2_flag=0;
int timer3_counter=0;
int timer3_flag=0;

void setTimer1(int duration){
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <setTimer1+0x20>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <setTimer1+0x24>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000010c 	.word	0x2000010c
 8001654:	20000110 	.word	0x20000110

08001658 <setTimer2>:

void setTimer2(int duration){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <setTimer2+0x20>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <setTimer2+0x24>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000114 	.word	0x20000114
 800167c:	20000118 	.word	0x20000118

08001680 <setTimer3>:

void setTimer3(int duration){
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <setTimer3+0x20>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <setTimer3+0x24>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000011c 	.word	0x2000011c
 80016a4:	20000120 	.word	0x20000120

080016a8 <timerRun1>:

void timerRun1(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <timerRun1+0x2c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dd0b      	ble.n	80016cc <timerRun1+0x24>
		timer1_counter--;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <timerRun1+0x2c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <timerRun1+0x2c>)
 80016bc:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <timerRun1+0x2c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dc02      	bgt.n	80016cc <timerRun1+0x24>
			timer1_flag=1;
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <timerRun1+0x30>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
		}
	}
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	2000010c 	.word	0x2000010c
 80016d8:	20000110 	.word	0x20000110

080016dc <timerRun2>:

void timerRun2(){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	if(timer2_counter>0){
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <timerRun2+0x2c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0b      	ble.n	8001700 <timerRun2+0x24>
		timer2_counter--;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <timerRun2+0x2c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <timerRun2+0x2c>)
 80016f0:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <timerRun2+0x2c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc02      	bgt.n	8001700 <timerRun2+0x24>
			timer2_flag=1;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <timerRun2+0x30>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000114 	.word	0x20000114
 800170c:	20000118 	.word	0x20000118

08001710 <timerRun3>:
void timerRun3(){
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	if(timer3_counter>0){
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <timerRun3+0x2c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd0b      	ble.n	8001734 <timerRun3+0x24>
		timer3_counter--;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <timerRun3+0x2c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <timerRun3+0x2c>)
 8001724:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <timerRun3+0x2c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dc02      	bgt.n	8001734 <timerRun3+0x24>
			timer3_flag=1;
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <timerRun3+0x30>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	2000011c 	.word	0x2000011c
 8001740:	20000120 	.word	0x20000120

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_MspInit+0x5c>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_MspInit+0x5c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_MspInit+0x5c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_MspInit+0x5c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_MspInit+0x60>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_MspInit+0x60>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000

080017a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201c      	movs	r0, #28
 80017d8:	f000 fa31 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f000 fa4a 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f90f 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM2_IRQHandler+0x10>)
 8001846:	f001 f877 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000012c 	.word	0x2000012c

08001854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <setLEDRED1>:
 *  Created on: Nov 1, 2022
 *      Author: Admin
 */
#include"traffic.h"

void setLEDRED1(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <setLEDRED1+0x2c>)
 800186a:	f000 fbb0 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <setLEDRED1+0x2c>)
 8001876:	f000 fbaa 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <setLEDRED1+0x2c>)
 8001882:	f000 fba4 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010800 	.word	0x40010800

08001890 <setLEDGREEN1>:
void setLEDGREEN1(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <setLEDGREEN1+0x2c>)
 800189a:	f000 fb98 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <setLEDGREEN1+0x2c>)
 80018a6:	f000 fb92 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <setLEDGREEN1+0x2c>)
 80018b2:	f000 fb8c 	bl	8001fce <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40010800 	.word	0x40010800

080018c0 <setLEDYELLOW1>:
void setLEDYELLOW1(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <setLEDYELLOW1+0x2c>)
 80018ca:	f000 fb80 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <setLEDYELLOW1+0x2c>)
 80018d6:	f000 fb7a 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <setLEDYELLOW1+0x2c>)
 80018e2:	f000 fb74 	bl	8001fce <HAL_GPIO_WritePin>
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40010800 	.word	0x40010800

080018f0 <setLEDRED2>:
void setLEDRED2(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <setLEDRED2+0x2c>)
 80018fa:	f000 fb68 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <setLEDRED2+0x2c>)
 8001906:	f000 fb62 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <setLEDRED2+0x2c>)
 8001912:	f000 fb5c 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40010c00 	.word	0x40010c00

08001920 <setLEDGREEN2>:
void setLEDGREEN2(){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8001924:	2201      	movs	r2, #1
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <setLEDGREEN2+0x2c>)
 800192a:	f000 fb50 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <setLEDGREEN2+0x2c>)
 8001936:	f000 fb4a 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <setLEDGREEN2+0x2c>)
 8001942:	f000 fb44 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40010c00 	.word	0x40010c00

08001950 <setLEDYELLOW2>:
void setLEDYELLOW2(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <setLEDYELLOW2+0x2c>)
 800195a:	f000 fb38 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <setLEDYELLOW2+0x2c>)
 8001966:	f000 fb32 	bl	8001fce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <setLEDYELLOW2+0x2c>)
 8001972:	f000 fb2c 	bl	8001fce <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010c00 	.word	0x40010c00

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a6:	f7ff ff55 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f001 fb0d 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff fd15 	bl	80013dc <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80019bc:	080030c8 	.word	0x080030c8
  ldr r2, =_sbss
 80019c0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80019c4:	2000017c 	.word	0x2000017c

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f923 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff feac 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f93b 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f903 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000050 	.word	0x20000050
 8001a50:	20000058 	.word	0x20000058
 8001a54:	20000054 	.word	0x20000054

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x1c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x20>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x20>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000058 	.word	0x20000058
 8001a78:	20000174 	.word	0x20000174

08001a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GetTick+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000174 	.word	0x20000174

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <__NVIC_EnableIRQ+0x34>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff90 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff2d 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff90 	bl	8001b80 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	; 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e148      	b.n	8001f52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8137 	bne.w	8001f4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4aa3      	ldr	r2, [pc, #652]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4aa1      	ldr	r2, [pc, #644]	; (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4aa1      	ldr	r2, [pc, #644]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a9f      	ldr	r2, [pc, #636]	; (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a9f      	ldr	r2, [pc, #636]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a9d      	ldr	r2, [pc, #628]	; (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a9d      	ldr	r2, [pc, #628]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a9b      	ldr	r2, [pc, #620]	; (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a9b      	ldr	r2, [pc, #620]	; (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a99      	ldr	r2, [pc, #612]	; (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a82      	ldr	r2, [pc, #520]	; (8001f84 <HAL_GPIO_Init+0x2d8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	; 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8090 	beq.w	8001f4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a55      	ldr	r2, [pc, #340]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x2e0>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_GPIO_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d101      	bne.n	8001e84 <HAL_GPIO_Init+0x1d8>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9e:	493b      	ldr	r1, [pc, #236]	; (8001f8c <HAL_GPIO_Init+0x2e0>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4937      	ldr	r1, [pc, #220]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4933      	ldr	r1, [pc, #204]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	492d      	ldr	r1, [pc, #180]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	491f      	ldr	r1, [pc, #124]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4919      	ldr	r1, [pc, #100]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4915      	ldr	r1, [pc, #84]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3301      	adds	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f aeaf 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	372c      	adds	r7, #44	; 0x2c
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	10320000 	.word	0x10320000
 8001f74:	10310000 	.word	0x10310000
 8001f78:	10220000 	.word	0x10220000
 8001f7c:	10210000 	.word	0x10210000
 8001f80:	10120000 	.word	0x10120000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40010800 	.word	0x40010800
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fde:	787b      	ldrb	r3, [r7, #1]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	041a      	lsls	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43d9      	mvns	r1, r3
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	400b      	ands	r3, r1
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e26c      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	4b92      	ldr	r3, [pc, #584]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800205c:	4b8f      	ldr	r3, [pc, #572]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d112      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d10b      	bne.n	800208e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_RCC_OscConfig+0x12c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d168      	bne.n	800215c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e246      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x76>
 8002098:	4b80      	ldr	r3, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7f      	ldr	r2, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7a      	ldr	r2, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a77      	ldr	r2, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0xbc>
 80020d2:	4b72      	ldr	r3, [pc, #456]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a71      	ldr	r2, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xd4>
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fcb6 	bl	8001a7c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fcb2 	bl	8001a7c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1fa      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe4>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fca2 	bl	8001a7c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff fc9e 	bl	8001a7c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1e6      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x10c>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
 8002182:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ba      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4939      	ldr	r1, [pc, #228]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e03a      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fc57 	bl	8001a7c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fc53 	bl	8001a7c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e19b      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4927      	ldr	r1, [pc, #156]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x270>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fc36 	bl	8001a7c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002214:	f7ff fc32 	bl	8001a7c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e17a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03a      	beq.n	80022b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d019      	beq.n	800227a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fc16 	bl	8001a7c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff fc12 	bl	8001a7c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e15a      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_RCC_OscConfig+0x26c>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002272:	2001      	movs	r0, #1
 8002274:	f000 faa6 	bl	80027c4 <RCC_Delay>
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_OscConfig+0x274>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fbfc 	bl	8001a7c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002286:	e00f      	b.n	80022a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fbf8 	bl	8001a7c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d908      	bls.n	80022a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e140      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	42420000 	.word	0x42420000
 80022a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a8:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1e9      	bne.n	8002288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a6 	beq.w	800240e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c6:	4b97      	ldr	r3, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b94      	ldr	r3, [pc, #592]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a93      	ldr	r2, [pc, #588]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a8a      	ldr	r2, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7ff fbb9 	bl	8001a7c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7ff fbb5 	bl	8001a7c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0fd      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x4f8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x312>
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4a7a      	ldr	r2, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6213      	str	r3, [r2, #32]
 8002340:	e02d      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x334>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	e01c      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b05      	cmp	r3, #5
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x356>
 800236c:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6213      	str	r3, [r2, #32]
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x36e>
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fb69 	bl	8001a7c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fb65 	bl	8001a7c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0ab      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ee      	beq.n	80023ae <HAL_RCC_OscConfig+0x37e>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb53 	bl	8001a7c <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fb4f 	bl	8001a7c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e095      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8081 	beq.w	800251a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d061      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d146      	bne.n	80024ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb23 	bl	8001a7c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff fb1f 	bl	8001a7c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e067      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	492d      	ldr	r1, [pc, #180]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a19      	ldr	r1, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	430b      	orrs	r3, r1
 8002486:	4927      	ldr	r1, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff faf3 	bl	8001a7c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff faef 	bl	8001a7c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e037      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x46a>
 80024b8:	e02f      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <HAL_RCC_OscConfig+0x4fc>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fadc 	bl	8001a7c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fad8 	bl	8001a7c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e020      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x498>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	42420060 	.word	0x42420060

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4965      	ldr	r1, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e073      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4936      	ldr	r1, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fa2c 	bl	8001a7c <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff fa28 	bl	8001a7c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e053      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f98a 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080030b0 	.word	0x080030b0
 80026fc:	20000050 	.word	0x20000050
 8002700:	20000054 	.word	0x20000054

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b490      	push	{r4, r7}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	1d3c      	adds	r4, r7, #4
 800270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002714:	f240 2301 	movw	r3, #513	; 0x201
 8002718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x40>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x46>
 8002742:	e02d      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002756:	4413      	add	r3, r2
 8002758:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800275c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c5b      	lsrs	r3, r3, #17
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002776:	4413      	add	r3, r2
 8002778:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800277c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002782:	fb02 f203 	mul.w	r2, r2, r3
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	e004      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	623b      	str	r3, [r7, #32]
      break;
 800279e:	e002      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a2:	623b      	str	r3, [r7, #32]
      break;
 80027a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc90      	pop	{r4, r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	080030a0 	.word	0x080030a0
 80027b8:	40021000 	.word	0x40021000
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	003d0900 	.word	0x003d0900

080027c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <RCC_Delay+0x34>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <RCC_Delay+0x38>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0a5b      	lsrs	r3, r3, #9
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e0:	bf00      	nop
  }
  while (Delay --);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1e5a      	subs	r2, r3, #1
 80027e6:	60fa      	str	r2, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f9      	bne.n	80027e0 <RCC_Delay+0x1c>
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000050 	.word	0x20000050
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e041      	b.n	8002896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe ffbe 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3304      	adds	r3, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f000 fa6a 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e035      	b.n	8002924 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_TIM_Base_Start_IT+0x90>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_TIM_Base_Start_IT+0x4e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d004      	beq.n	80028ee <HAL_TIM_Base_Start_IT+0x4e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_TIM_Base_Start_IT+0x94>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b06      	cmp	r3, #6
 80028fe:	d010      	beq.n	8002922 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	e007      	b.n	8002922 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0202 	mvn.w	r2, #2
 8002964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f9b1 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9a4 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9b3 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f987 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f97a 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f989 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0208 	mvn.w	r2, #8
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2204      	movs	r2, #4
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f95d 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f950 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f95f 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0210 	mvn.w	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2208      	movs	r2, #8
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f933 	bl	8002ce2 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f926 	bl	8002cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f935 	bl	8002cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0201 	mvn.w	r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fda0 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b80      	cmp	r3, #128	; 0x80
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa67 	bl	8002fb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d10e      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d107      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8f9 	bl	8002d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d10e      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0220 	mvn.w	r2, #32
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa32 	bl	8002fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIM_ConfigClockSource+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0b3      	b.n	8002cc8 <HAL_TIM_ConfigClockSource+0x180>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b98:	d03e      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xd0>
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	f200 8087 	bhi.w	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba6:	f000 8085 	beq.w	8002cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bae:	d87f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b70      	cmp	r3, #112	; 0x70
 8002bb2:	d01a      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xa2>
 8002bb4:	2b70      	cmp	r3, #112	; 0x70
 8002bb6:	d87b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b60      	cmp	r3, #96	; 0x60
 8002bba:	d050      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x116>
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d877      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b50      	cmp	r3, #80	; 0x50
 8002bc2:	d03c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0xf6>
 8002bc4:	2b50      	cmp	r3, #80	; 0x50
 8002bc6:	d873      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d058      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x136>
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d86f      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b30      	cmp	r3, #48	; 0x30
 8002bd2:	d064      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b30      	cmp	r3, #48	; 0x30
 8002bd6:	d86b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d060      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d867      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05c      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d05a      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002be8:	e062      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f000 f95c 	bl	8002eb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
      break;
 8002c16:	e04e      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f000 f945 	bl	8002eb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3a:	609a      	str	r2, [r3, #8]
      break;
 8002c3c:	e03b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f000 f8bc 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f913 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e02b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 f8da 	bl	8002e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2160      	movs	r1, #96	; 0x60
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f903 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e01b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 f89c 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f8f3 	bl	8002e82 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e00b      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f000 f8ea 	bl	8002e82 <TIM_ITRx_SetConfig>
        break;
 8002cae:	e002      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <TIM_Base_SetConfig+0xa8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x28>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x28>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <TIM_Base_SetConfig+0xac>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <TIM_Base_SetConfig+0xa8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <TIM_Base_SetConfig+0x52>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d003      	beq.n	8002d6a <TIM_Base_SetConfig+0x52>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <TIM_Base_SetConfig+0xac>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d108      	bne.n	8002d7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <TIM_Base_SetConfig+0xa8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	615a      	str	r2, [r3, #20]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 0210 	bic.w	r2, r3, #16
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	609a      	str	r2, [r3, #8]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e041      	b.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d004      	beq.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2600      	movs	r6, #0
 8002fcc:	4d0c      	ldr	r5, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	f000 f856 	bl	8003088 <_init>
 8002fdc:	2600      	movs	r6, #0
 8002fde:	4d0a      	ldr	r5, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	080030c0 	.word	0x080030c0
 8003004:	080030c0 	.word	0x080030c0
 8003008:	080030c0 	.word	0x080030c0
 800300c:	080030c4 	.word	0x080030c4

08003010 <memset>:
 8003010:	4603      	mov	r3, r0
 8003012:	4402      	add	r2, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <time>:
 8003020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <time+0x30>)
 8003024:	4604      	mov	r4, r0
 8003026:	2200      	movs	r2, #0
 8003028:	4669      	mov	r1, sp
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	f000 f812 	bl	8003054 <_gettimeofday_r>
 8003030:	2800      	cmp	r0, #0
 8003032:	da05      	bge.n	8003040 <time+0x20>
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e9cd 2300 	strd	r2, r3, [sp]
 8003040:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003044:	b10c      	cbz	r4, 800304a <time+0x2a>
 8003046:	e9c4 0100 	strd	r0, r1, [r4]
 800304a:	b004      	add	sp, #16
 800304c:	bd10      	pop	{r4, pc}
 800304e:	bf00      	nop
 8003050:	2000005c 	.word	0x2000005c

08003054 <_gettimeofday_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	2300      	movs	r3, #0
 8003058:	4d06      	ldr	r5, [pc, #24]	; (8003074 <_gettimeofday_r+0x20>)
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	602b      	str	r3, [r5, #0]
 8003062:	f000 f809 	bl	8003078 <_gettimeofday>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	d102      	bne.n	8003070 <_gettimeofday_r+0x1c>
 800306a:	682b      	ldr	r3, [r5, #0]
 800306c:	b103      	cbz	r3, 8003070 <_gettimeofday_r+0x1c>
 800306e:	6023      	str	r3, [r4, #0]
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	20000178 	.word	0x20000178

08003078 <_gettimeofday>:
 8003078:	2258      	movs	r2, #88	; 0x58
 800307a:	4b02      	ldr	r3, [pc, #8]	; (8003084 <_gettimeofday+0xc>)
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	4770      	bx	lr
 8003084:	20000178 	.word	0x20000178

08003088 <_init>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr

08003094 <_fini>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	bf00      	nop
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr
